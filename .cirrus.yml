---

# Main collection of env. vars to set for all tasks and scripts.
env:
    ####
    #### Cache-image names to test with (double-quotes around names are critical)
    ####
    FEDORA_NAME: "fedora-40"
    FEDORA_AARCH64_NAME: "${FEDORA_NAME}-aarch64"

    # Image identifiers
    IMAGE_SUFFIX: "c20241016t144444z-f40f39d13"

    # EC2 images
    FEDORA_AMI: "fedora-aws-${IMAGE_SUFFIX}"
    FEDORA_AARCH64_AMI: "fedora-podman-aws-arm64-${IMAGE_SUFFIX}"
    WINDOWS_AMI: "win-server-wsl-${IMAGE_SUFFIX}"

    # Container
    FEDORA_CONTAINER_FQIN: "quay.io/libpod/fedora_podman:${IMAGE_SUFFIX}"

    # directory where the images will be placed
    OUTDIR: "outdir"

    HOME: /root
    CIRRUS_WORKING_DIR: /var/tmp/podman-machine-os

    # Vars used for the macos and windows testing
    MACHINE_IMAGE_URL: "https://api.cirrus-ci.com/v1/artifact/build/${CIRRUS_BUILD_ID}/Image Build ${ARCH}/image/${MACHINE_IMAGE}"
    PODMAN_VERSION: 5.2.5

aws_credentials: ENCRYPTED[b01991b35fe3f81eed974cf47b5541ed518eacfee4e430e9fb50fba31090f557ea86b0b79b5f5b4a712218206e0f3f58]

# Default timeout
timeout_in: 30m

image_build_task:
    name: "Image Build ${ARCH}"
    alias: "image_build"
    ec2_instance:
        image: "${VM_IMAGE}"
        type: "${EC2_INST_TYPE}"
        region: us-east-1
    matrix:
        - env:
            ARCH: "x86_64"
            VM_IMAGE: "${FEDORA_AMI}"
            EC2_INST_TYPE: "m5zn.metal"  # Bare-metal instance is required
        - env:
            ARCH: "aarch64"
            VM_IMAGE: "${FEDORA_AARCH64_AMI}"
            EC2_INST_TYPE: "c6g.metal"  # Bare-metal instance is required

    setup_script: ./contrib/cirrus/setup.sh
    build_script: ./build.sh
    verify_script: ./contrib/cirrus/verify.sh
    image_prep_script: "mv $OUTDIR/*.zst ."
    image_artifacts: &image_artifacts
        path: "*.zst"
        type: application/octet-stream

verify_windows_task:
    name: "Verify HyperV"
    alias: "verify_windows"
    depends_on:
        - image_build
    ec2_instance: &windows
        image: "${WINDOWS_AMI}"
        type: m5zn.metal
        region: us-east-1
        platform: windows
    env:
        ARCH: "x86_64"
        CIRRUS_WORKING_DIR: "${LOCALAPPDATA}\\cirrus-ci-build"
        CIRRUS_SHELL: powershell
        PATH: "${PATH};C:\\Program Files\\RedHat\\Podman"
        MACHINE_IMAGE: "stage-machine-os.${ARCH}.hyperv.vhdx.zst"
    setup_script: .\contrib\cirrus\windows_setup.ps1
    main_script: |
        $Env:CONTAINERS_MACHINE_PROVIDER = "hyperv"
        $Env:MACHINE_IMAGE_PATH="..\${ENV:MACHINE_IMAGE}"
        .\bin\ginkgo .\verify
        if ( ($LASTEXITCODE -ne $null) -and ($LASTEXITCODE -ne 0) ) {
            throw "Exit code = '$LASTEXITCODE' running ginkgo"
        }

verify_macos_task:
    name: "Verify AppleHV"
    alias: "verify_macos"
    persistent_worker: &mac_pw
    labels:
        os: darwin
        arch: arm64
        purpose: prod
    env: &mac_env
        ARCH: "aarch64"
        CIRRUS_SHELL: "/bin/bash"  # sh is the default
        CIRRUS_WORKING_DIR: "$HOME/ci/task-${CIRRUS_TASK_ID}"  # Isolation: $HOME will be set to "ci" dir.
        # Prevent cache-pollution fron one task to the next.
        GOPATH: "$CIRRUS_WORKING_DIR/.go"
        GOCACHE: "$CIRRUS_WORKING_DIR/.go/cache"
        GOENV: "$CIRRUS_WORKING_DIR/.go/support"
        GOSRC: "$HOME/ci/task-${CIRRUS_TASK_ID}"
        MACHINE_IMAGE: "stage-machine-os.${ARCH}.applehv.raw.zst"
    prep_script: &mac_cleanup "contrib/cirrus/mac_cleanup.sh"
    setup_script: |
        curl --retry 5 --retry-delay 8 --fail --location -O
        --url "${MACHINE_IMAGE_URL}"
        git clone --depth 1 --branch ${PODMAN_VERSION} https://github.com/containers/podman.git
        make -C podman-remote
        ./podman/bin/darwin/podman --version
        mkdir bin
        cd verify
        go build -o ../bin/ginkgo.exe ./vendor/github.com/onsi/ginkgo/v2/ginkgo
    main_script: |
        export CONTAINERS_MACHINE_PROVIDER="applehv"
        ./bin/ginkgo ./verify

    # This host is/was shared with potentially many other CI tasks.
    # Ensure nothing is left running while waiting for the next task.
    always:
        task_cleanup_script: *mac_cleanup

test_task:
    name: "Total Success"
    alias: success
    depends_on:
        - image_build
        - verify_windows
        - verify_macos
    container:
        image: "${FEDORA_CONTAINER_FQIN}"
        cpu: 1
        memory: 1
    noop_script: true
