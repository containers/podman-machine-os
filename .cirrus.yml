---

# Main collection of env. vars to set for all tasks and scripts.
env:
    # Image identifiers
    IMAGE_SUFFIX: "c20250910t092246z-f42f41d13"

    # EC2 images
    FEDORA_AMI: "fedora-aws-${IMAGE_SUFFIX}"
    FEDORA_AARCH64_AMI: "fedora-podman-aws-arm64-${IMAGE_SUFFIX}"
    WINDOWS_AMI: "win-server-wsl-${IMAGE_SUFFIX}"

    # Container
    FEDORA_CONTAINER_FQIN: "quay.io/libpod/fedora_podman:${IMAGE_SUFFIX}"

    # directory where the images will be placed
    OUTDIR: "outdir"

    CIRRUS_WORKING_DIR: /var/tmp/podman-machine-os
    CIRRUS_CLONE_SUBMODULES: "true"

    # Vars used for the macos and windows testing
    MACHINE_IMAGE_BASE_URL: "https://api.cirrus-ci.com/v1/artifact/build/${CIRRUS_BUILD_ID}/image_build/image/"
    # podman version used by windows/macos verify suite
    PODMAN_INSTALL_VERSION: 5.6.1

gcp_credentials: ENCRYPTED[b06ef3490b73469d9da1402568d6f3e46a852955a4ab0807689d50352ecf2852cb5903e8d3b7603eaab9d1c7c7d851a5]

aws_credentials: ENCRYPTED[b01991b35fe3f81eed974cf47b5541ed518eacfee4e430e9fb50fba31090f557ea86b0b79b5f5b4a712218206e0f3f58]

# Default timeout
timeout_in: 30m

image_build_task:
    name: "Image Build ${ARCH}"
    alias: "image_build"
    ec2_instance:
        image: "${VM_IMAGE}"
        type: "${EC2_INST_TYPE}"
        region: us-east-1
        architecture: "${GO_ARCH}"
    env:
        HOME: /root
    matrix:
        - env:
            ARCH: "x86_64"
            GO_ARCH: "amd64"
            VM_IMAGE: "${FEDORA_AMI}"
            EC2_INST_TYPE: "c7i.xlarge"
        - env:
            ARCH: "aarch64"
            GO_ARCH: "arm64"
            VM_IMAGE: "${FEDORA_AARCH64_AMI}"
            EC2_INST_TYPE: "c6gn.xlarge"

    setup_script: |
        # Build process must run with selinux disabled?!
        setenforce 0
    build_script: ./build.sh
    image_prep_script: |
        mv $OUTDIR/*.zst .
        mv $OUTDIR/podman-machine podman-machine.${ARCH}.tar
    image_artifacts: &image_artifacts
        path: "*.{zst,tar}"
        type: application/octet-stream

verify_linux_task:
    name: "Verify Linux ${ARCH}"
    alias: "verify_linux"
    depends_on:
        - image_build
    ec2_instance:
        image: "${VM_IMAGE}"
        type: "${EC2_INST_TYPE}"
        region: us-east-1
        architecture: "${GO_ARCH}"
    env:
        HOME: /root
        MACHINE_IMAGE: "podman-machine.${ARCH}.qemu.qcow2.zst"
    matrix:
        - env:
            ARCH: "x86_64"
            GO_ARCH: "amd64"
            VM_IMAGE: "${FEDORA_AMI}"
            EC2_INST_TYPE: "m5zn.metal"  # Bare-metal instance is required
        - env:
            ARCH: "aarch64"
            GO_ARCH: "arm64"
            VM_IMAGE: "${FEDORA_AARCH64_AMI}"
            EC2_INST_TYPE: "c6g.metal"  # Bare-metal instance is required
    setup_script: ./contrib/cirrus/setup.sh
    verify_script: ./contrib/cirrus/verify.sh
    # Verify we have gh installed
    # TODO: should we verify if the release tokens are valid by testing the login?
    gh_script: gh --version

verify_windows_task:
    name: "Verify ${PROVIDER}"
    alias: "verify_windows"
    depends_on:
        - image_build
    ec2_instance: &windows
        image: "${WINDOWS_AMI}"
        type: m5zn.metal
        region: us-east-1
        platform: windows
    env:
        ARCH: "x86_64"
        CIRRUS_WORKING_DIR: "${LOCALAPPDATA}\\cirrus-ci-build"
        CIRRUS_SHELL: powershell
        PATH: "${PATH};C:\\Program Files\\RedHat\\Podman"
        MACHINE_IMAGE: "podman-machine.${ARCH}.${PROVIDER}.${FILETYPE}.zst"
    matrix:
        - env:
            PROVIDER: hyperv
            FILETYPE: vhdx
        - env:
            PROVIDER: wsl
            FILETYPE: tar
    setup_script: .\contrib\cirrus\windows_setup.ps1
    main_script: |
        powershell.exe -File ".\contrib\cirrus\win-sess-launch.ps1"  ".\contrib\cirrus\win-verify.ps1"
        if ( ($LASTEXITCODE -ne $null) -and ($LASTEXITCODE -ne 0) ) {
            throw "Exit code = '$LASTEXITCODE' running ginkgo"
        }


verify_macos_task:
    name: "Verify $CONTAINERS_MACHINE_PROVIDER"
    alias: "verify_macos"
    depends_on:
        - image_build
    persistent_worker: &mac_pw
        labels:
            os: darwin
            arch: arm64
            purpose: prod
    env: &mac_env
        ARCH: "aarch64"
        CIRRUS_SHELL: "/bin/bash"  # sh is the default
        CIRRUS_WORKING_DIR: "$HOME/ci/task-${CIRRUS_TASK_ID}"  # Isolation: $HOME will be set to "ci" dir.
        # Prevent cache-pollution fron one task to the next.
        GOPATH: "$CIRRUS_WORKING_DIR/.go"
        GOCACHE: "$CIRRUS_WORKING_DIR/.go/cache"
        GOENV: "$CIRRUS_WORKING_DIR/.go/support"
        GOSRC: "$HOME/ci/task-${CIRRUS_TASK_ID}"
        MACHINE_IMAGE: "podman-machine.${ARCH}.applehv.raw.zst"
    matrix:
        - env:
            CONTAINERS_MACHINE_PROVIDER: applehv
        - env:
            CONTAINERS_MACHINE_PROVIDER: libkrun

    prep_script: &mac_cleanup "contrib/cirrus/mac_cleanup.sh"
    setup_script: |
        curl --retry 5 --retry-delay 8 --fail --location -O --url "${MACHINE_IMAGE_BASE_URL}${MACHINE_IMAGE}"
        git clone --depth 1 --branch v${PODMAN_INSTALL_VERSION} https://github.com/containers/podman.git
        make -C podman podman-remote
        ./podman/bin/darwin/podman --version
        mkdir bin
        cd verify
        go build -o ../bin/ginkgo ./vendor/github.com/onsi/ginkgo/v2/ginkgo
    main_script: |
        export MACHINE_IMAGE_PATH="../${MACHINE_IMAGE}"
        export PODMAN_BINARY=../podman/bin/darwin/podman
        source ./podman-rpm-info-vars.sh
        ./bin/ginkgo -v ./verify

    # This host is/was shared with potentially many other CI tasks.
    # Ensure nothing is left running while waiting for the next task.
    always:
        task_cleanup_script: *mac_cleanup

publish_images_task:
    name: "Publish Images"
    alias: "publish_images"
    # Make sure that there are not two push running at the same time.
    execution_lock: $CIRRUS_BRANCH
    # Less likely the task is canceled.
    stateful: true
    # Only push new images on tags or on commits to main
    only_if: $CIRRUS_TAG != '' || ($CIRRUS_BRANCH == 'main' && $CIRRUS_PR == "")
    depends_on:
        - verify_linux
        - verify_windows
        - verify_macos
        - image_build
    ec2_instance:
        image: "${VM_IMAGE}"
        type: "${EC2_INST_TYPE}"
        region: us-east-1
    env:
        HOME: /root
        VM_IMAGE: "${FEDORA_AMI}"
        EC2_INST_TYPE: "m5.large"
        QUAY_USER: ENCRYPTED[53d23fbd39a3b8b0daf015edac296b56964da0b523767f79d3a8131a4871523b90c5a7554c91172c1ca0066e492853e3]
        QUAY_PASSWORD: ENCRYPTED[3cfabb0f7fa6a36dc6af433f5a0291d87b38402c922b662e9647931a635f20ca33401aa91b29745b7af252538406a292]
        RELEASE_TOKEN: ENCRYPTED[51eebe3e4119c3c51078be7827458df1e63c882851484f95bc0624a0d4ddbed48163debc1afb33711d268d9b444eaa3a]
        LABEL_TOKEN: ENCRYPTED[4095757ab03fa845ea08ab99cb8fe3a560e65de22204fbac07043d076d2f498ab5fedd0491659d8f3baef2c831b482aa]
    push_script: |
        mkdir $OUTDIR
        for end in applehv.raw.zst hyperv.vhdx.zst qemu.qcow2.zst wsl.tar.zst tar; do
            for arch in x86_64 aarch64; do
                name="podman-machine.$arch.$end"
                curl --retry 5 --retry-delay 8 --fail --location -O --output-dir $OUTDIR --url "${MACHINE_IMAGE_BASE_URL}$name"
            done
        done

        source ./gather.sh
        podman images
        podman login -u "$QUAY_USER" --password-stdin quay.io <<<"$QUAY_PASSWORD"
        time podman manifest push --all "$FULL_IMAGE_NAME"
        if [[ "$CIRRUS_BRANCH" == "main" ]]; then
            # When running on main push a "next" tag as well.
            time podman manifest push --all "$FULL_IMAGE_NAME" "${FULL_IMAGE_NAME%:*}:next"
        fi
    release_script: |
        if [[ $CIRRUS_TAG != '' ]]; then
            pushd $OUTDIR
            sha256sum * > shasums
            popd

            gh auth login --with-token <<<"$RELEASE_TOKEN"

            if [[ $CIRRUS_TAG == *-rc* ]]; then
                RC="--prerelease"
            else
                # check if this version should not be marked latest
                prevvers=$(gh api repos/containers/podman-machine-os/releases/latest --jq '.tag_name')
                echo "${prevvers},${CIRRUS_TAG}"
                # sort -V -C returns 0 if args are ascending version order
                if !(echo "${prevvers},${CIRRUS_TAG}" | tr ',' '\n' | sort -V -C)
                then
                    LATEST="--latest=false"
                fi
            fi

            gh release create $CIRRUS_TAG \
                -t $CIRRUS_TAG \
                --notes "$CIRRUS_TAG release images" \
                --verify-tag \
                $RC \
                $LATEST \
                $OUTDIR/*
            gh auth logout
        fi
    podman_label_script: |
        if [[ $CIRRUS_TAG != '' ]]; then
            pr=$(sed -n '/^export PODMAN_PR_NUM/s/^[^"]*"\([^"]*\)"$/\1/p' podman-rpm-info-vars.sh)
            if [[ $pr != "" ]]; then
                gh auth login --with-token <<<"$LABEL_TOKEN"
                gh pr edit --remove-label do-not-merge/wait-machine-os-build  https://github.com/containers/podman/pull/$pr
                gh auth logout
            fi
        fi

test_task:
    name: "Total Success"
    alias: success
    depends_on:
        - image_build
        - publish_images
        - verify_linux
        - verify_windows
        - verify_macos
    container:
        image: "${FEDORA_CONTAINER_FQIN}"
        cpu: 1
        memory: 1
    noop_script: true
