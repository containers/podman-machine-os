FROM quay.io/fedora/fedora-coreos:stable

ARG PODMAN_RPM_TYPE=${PODMAN_RPM_TYPE}
ARG PODMAN_VERSION=${PODMAN_VERSION}
ARG PODMAN_RPM_RELEASE=${PODMAN_RPM_RELEASE}
ARG FEDORA_RELEASE=${FEDORA_RELEASE}
ARG ARCH=${ARCH}
ARG PODMAN_RPM_URL="https://kojipkgs.fedoraproject.org/packages/podman/${PODMAN_VERSION}/${PODMAN_RPM_RELEASE}.fc${FEDORA_RELEASE}/${ARCH}/podman-${PODMAN_VERSION}-${PODMAN_RPM_RELEASE}.fc${FEDORA_RELEASE}.${ARCH}.rpm"

# Make required directories
RUN mkdir -p /etc/containers/registries.conf.d && \
    mkdir -p /etc/systemd/system.conf.d && \
    mkdir -p /etc/environment.d && \
    mkdir -p /etc/containers/registries.conf.d

COPY  50-podman-makestep.conf /etc/chrony.d/50-podman-makestep.conf
COPY  docker-host.sh /etc/profile.d/docker-host.sh
COPY  999-podman-machine.conf /etc/containers/registries.conf.d/999-podman-machine.conf
COPY  10-inotify-instances.conf /etc/sysctl.d/10-inotify-instances.conf

## Enables automatic login on the console;
## there's no security concerns here, and this makes debugging easier.
## xref https://docs.fedoraproject.org/en-US/fedora-coreos/tutorial-autologin/
COPY  10-autologin.conf /etc/systemd/system/serial-getty@.service.d/10-autologin.conf
COPY  10-autologin.conf /etc/systemd/system/getty@.service.d/10-autologin.conf

## Set delegate.conf so cpu,io subsystem is delegated to non-root users as well for cgroupv2
## by default
COPY delegate.conf /etc/systemd/system/user@.service.d/delegate.conf

# Setup the podman-next copr repo
# The source file for the dnf repo may say `rawhide` but it's release
# agnostic and `rawhide` in the name is unlikely to change compared
# with URLs containing fedora release numbers.
ADD https://copr.fedorainfracloud.org/coprs/rhcontainerbot/podman-next/repo/fedora-rawhide/rhcontainerbot-podman-next-fedora-rawhide.repos /etc/yum.repos.d/rhcontainerbot-podman-next-fedora.repo
ADD https://download.copr.fedorainfracloud.org/results/rhcontainerbot/podman-next/pubkey.gpg /etc/pki/rpm-gpg/rhcontainerbot-podman-next-fedora.gpg

# 1. For dev builds, replace aardvark-dns, conmon, crun, netavark, podman, containers-common
# 2. For release builds, fetch the build from koji
# 3. Remove moby-engine, containerd, runc, zincati for both dev and release builds
# Note: Currently does not result in a size reduction for the container image

RUN if [[ ${PODMAN_RPM_TYPE} == "dev" ]]; then \
        rpm-ostree override replace --experimental --freeze \
        --from repo="copr:copr.fedorainfracloud.org:rhcontainerbot:podman-next" \
        aardvark-dns crun netavark podman containers-common containers-common-extra crun-wasm; \
    else \
        rm /etc/yum.repos.d/rhcontainerbot*.repo /etc/pki/rpm-gpg/rhcontainerbot*.gpg; \
        if [[ $(rpm -q podman) != "podman-${PODMAN_VERSION}-${PODMAN_RPM_RELEASE}.fc${FEDORA_RELEASE}.${ARCH}" ]]; then \
            rpm-ostree override replace ${PODMAN_RPM_URL}; \
        fi; \
    fi; \
    rpm-ostree override remove moby-engine containerd runc; \
    rm -fr /var/cache && ostree container commit

# Install subscription-manager and enable service to refresh certificates
# Install qemu-user-static for bootc
# Install gvisor-tap-vsock-gvforwarder for hyperv
RUN rpm-ostree install subscription-manager gvisor-tap-vsock-gvforwarder qemu-user-static && rm -fr /var/cache

RUN systemctl enable rhsmcertd.service
# Patching qemu backed binfmt configurations to use the actual executable's permissions and not the interpreter's
RUN for x in /usr/lib/binfmt.d/*.conf; do sed 's/\(:[^C:]*\)$/\1C/' "$x" | tee /etc/binfmt.d/"$(basename "$x")"; done

COPY  core /var/lib/systemd/linger/core

# Disable ignition chrony overrides
RUN systemctl disable coreos-platform-chrony-config.service && \
    # Append the chrony conf dir location to the default config
    echo "confdir /etc/chrony.d" >> /etc/chrony.conf

# Disable the systemd resolver, the unit cannot be disabled/ or masked
# https://fedoraproject.org/wiki/Changes/systemd-resolved#Fully_opting_out_of_systemd-resolved_use
# https://github.com/containers/podman-machine-os/issues/18
# We have to remove /etc/resolv.conf because that is a symlink to the systemd resolv dir which
# means NetworkManager will not populate it otherwise. To do that we use --network=none so podman
# does not mount over it and we can remove and create a real inode on the rootfs.
RUN --network=none mkdir -p /etc/systemd/system-preset && \
    echo "disable systemd-resolved.service" >/etc/systemd/system-preset/20-systemd-resolved-disable.preset && \
    rm -f /etc/resolv.conf && touch /etc/resolv.conf

# For Rosetta
# We should enable the service but for some reason the chnage is not
# carried into the VM even if we do so here, so for now this must be
# enabled via ignition by podman machine code:
# https://github.com/containers/podman/pull/21670#discussion_r1585790802
COPY rosetta-activation.service /etc/systemd/system/rosetta-activation.service
COPY rosetta-activation.sh /usr/local/bin/rosetta-activation.sh
