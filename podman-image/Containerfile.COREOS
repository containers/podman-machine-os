ARG FCOS_BASE_IMAGE=${FCOS_BASE_IMAGE}
FROM ${FCOS_BASE_IMAGE}

ARG PODMAN_PR_NUM=${PODMAN_PR_NUM}
ARG FEDORA_VERSION=${FEDORA_VERSION}

RUN --mount=type=bind,source=/build_common.sh,target=/run/build_common.sh,z \
    /run/build_common.sh && ostree container commit

COPY podman-iptables.conf /etc/modules-load.d/podman-iptables.conf

# Work around for network-online.target issue https://github.com/containers/podman/issues/26134
COPY podman-user-wait-network-online-override.conf /usr/lib/systemd/user/podman-user-wait-network-online.service.d/podman-user-wait-network-online-override.conf

# Configure our own systemd unit presets.
COPY 00-podman-machine.preset /usr/lib/systemd/system-preset/00-podman-machine.preset

## Enables automatic login on the console;
## there's no security concerns here, and this makes debugging easier.
## xref https://docs.fedoraproject.org/en-US/fedora-coreos/tutorial-autologin/
COPY  10-autologin.conf /etc/systemd/system/serial-getty@.service.d/10-autologin.conf
COPY  10-autologin.conf /etc/systemd/system/getty@.service.d/10-autologin.conf

# Disable the systemd resolver, the unit cannot be disabled/ or masked
# https://fedoraproject.org/wiki/Changes/systemd-resolved#Fully_opting_out_of_systemd-resolved_use
# https://github.com/containers/podman-machine-os/issues/18
# We have to remove /etc/resolv.conf because that is a symlink to the systemd-resolved dir which
# means NetworkManager will not populate it otherwise. To do that we use --network=none so podman
# does not mount over it and we can remove and create a real inode on the rootfs.
# We also remove all systemd-resolved content as the tmpfile.d shipped there will recreate the
# symlink otherwise. While creating an empty file used to be good enough since
# https://github.com/bootc-dev/bootc/pull/1167 that no longer works as it automatically removes
# this empty file for other reasons. Removing the package is much more robust so we do that.
RUN --network=none rm -vf /etc/resolv.conf && rpm -e systemd-resolved

# For Rosetta
# We should enable the service but for some reason the change is not
# carried into the VM even if we do so here, so for now this must be
# enabled via ignition by podman machine code:
# https://github.com/containers/podman/pull/21670#discussion_r1585790802
COPY rosetta-activation.service /etc/systemd/system/rosetta-activation.service
COPY rosetta-activation.sh /usr/local/bin/rosetta-activation.sh

# Configure qemu-guest-agent
# Copy in our service file override that communicates over vsock
COPY qemu-guest-agent.service /etc/systemd/system/qemu-guest-agent.service
# Bind mount non-base selinux policy module compile it and install it to allow
# qemu-guest-agent access to the vsock-socket
RUN --mount=type=bind,source=/qemuga-vsock.te,target=/run/qemuga-vsock.te,z <<EOF
/usr/bin/checkmodule -M -m -o /run/qemuga-vsock.mod /run/qemuga-vsock.te
/usr/bin/semodule_package -o /run/qemuga-vsock.pp -m /run/qemuga-vsock.mod
sudo semodule -i /run/qemuga-vsock.pp
rm /run/qemuga-vsock.pp /run/qemuga-vsock.mod
systemctl enable qemu-guest-agent.service
EOF
